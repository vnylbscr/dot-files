{
  "editor.bracketPairColorization.enabled": true,
  "editor.guides.bracketPairs": "active",
  "files.autoSave": "afterDelay",
  "[json]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  },
  "editor.inlayHints.enabled": true,
  "editor.renderLineHighlight": "all",
  "editor.formatOnPaste": true,
  "editor.accessibilitySupport": "off",
  "vim.normalModeKeyBindings": [
    {
      "after": ["d", "d"],
      "before": ["<leader>", "d"]
    },
    {
      "after": ["c", "i", "'"],
      "before": ["<leader>", "2"]
    },
    {
      "after": ["c", "i", "w"],
      "before": ["<leader>", "c"]
    },
    {
      "commands": ["workbench.action.nextEditor"],
      "before": ["<tab>"]
    },
    {
      "commands": ["workbench.action.previousEditor"],
      "before": ["<S-tab>"]
    }
  ],
  "editor.codeLens": true,
  "editor.cursorSmoothCaretAnimation": false,
  "editor.lineHeight": 24,
  "vim.hlsearch": true,
  "terminal.integrated.fontFamily": "Hack",
  "[typescriptreact]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  },
  "editor.cursorBlinking": "blink",
  "editor.formatOnSave": true,
  "editor.cursorWidth": 2,
  "vim.incsearch": true,
  "gitlens.hovers.currentLine.enabled": false,
  "editor.fontLigatures": true,
  "[javascriptreact]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  },
  "[javascript]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  },
  "vim.normalModeKeyBindingsNonRecursive": [
    {
      "after": ["d", "d"],
      "before": ["<leader>", "d"]
    },
    {
      "commands": [":nohl"],
      "before": ["<C-n>"]
    },
    {
      "commands": ["workbench.action.splitEditor"],
      "before": ["<leader>", "w"]
    },
    {
      "commands": ["workbench.action.toggleSidebarVisibility"],
      "before": ["<leader>", "e"]
    },
    {
      "commands": ["revealInExplorer"],
      "before": ["<leader>", "f"]
    },
    {
      "after": ["_"],
      "before": ["<leader>", "h"]
    },
    {
      "after": ["$"],
      "before": ["<leader>", "l"]
    }
  ],
  "vim.leader": ",",
  "vim.easymotion": true,
  "vim.useSystemClipboard": true,
  "[typescript]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  },
  "terminal.integrated.fontSize": 15,
  "[jsonc]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  },
  "vim.insertModeKeyBindings": [
    {
      "after": ["<Esc>"],
      "before": ["j", "k"]
    },
    {
      "after": ["<Esc>"],
      "before": ["<C-j>"]
    },
    {
      "after": ["<Esc>"],
      "before": ["<C-k>"]
    }
  ],
  "vim.sneak": true,
  "editor.smoothScrolling": true,
  "files.autoSaveDelay": 2000,
  "vim.useCtrlKeys": true,
  "editor.wordWrap": "on",
  "git.confirmSync": false,
  "explorer.confirmDelete": false,
  "[vue]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  },
  "vetur.completion.scaffoldSnippetSources": {
    "workspace": "??",
    "user": "???",
    "vetur": "?"
  },

  // Casing conversion for tag completion
  //  - initial: use the key in `components: {...}` as is for tag completion and do not force any casing
  //  - kebab: kebab-case completion for <my-tag>
  "vetur.completion.tagCasing": "kebab",

  // Log level for VLS
  //  - INFO: Only log info messages. This is the default.
  //  - DEBUG: Log info and debug messages.
  "vetur.dev.logLevel": "INFO",

  // Path to vls for Vetur developers. There are two ways of using it.
  //
  // 1. Clone vuejs/vetur from GitHub, build it and point it to the ABSOLUTE path of `/server`.
  // 2. `yarn global add vls` and point Vetur to the installed location (`yarn global dir` + node_modules/vls)
  "vetur.dev.vlsPath": "",

  // The port that VLS listens to. Can be used for attaching to the VLS Node process for debugging / profiling.
  "vetur.dev.vlsPort": -1,

  // Enable template interpolation service that offers hover / definition / references in Vue interpolations.
  "vetur.experimental.templateInterpolationService": false,

  // Default formatter for <style> region
  //  - none: disable formatting
  //  - prettier: css formatter using css parser from prettier
  "vetur.format.defaultFormatter.css": "prettier",

  // Default formatter for <template> region
  //  - none: disable formatting
  //  - prettyhtml: ?? [DEPRECATED] prettyhtml
  //  - js-beautify-html: html formatter of js-beautify
  //  - prettier: prettier
  "vetur.format.defaultFormatter.html": "prettier",

  // Default formatter for <script> region
  //  - none: disable formatting
  //  - prettier: js formatter from prettier
  //  - prettier-eslint: prettier-eslint
  //  - vscode-typescript: js formatter from TypeScript
  "vetur.format.defaultFormatter.js": "prettier",

  // Default formatter for <style lang='less'> region
  //  - none: disable formatting
  //  - prettier: less formatter using postcss parser from prettier
  "vetur.format.defaultFormatter.less": "prettier",

  // Default formatter for <style lang='postcss'> region
  //  - none: disable formatting
  //  - prettier: postcss formatter using css parser from prettier
  "vetur.format.defaultFormatter.postcss": "prettier",

  // Default formatter for <template lang='pug'> region
  //  - none: disable formatting
  //  - prettier: prettier
  "vetur.format.defaultFormatter.pug": "prettier",

  // Default formatter for <style lang='sass'> region
  //  - none: disable formatting
  //  - sass-formatter: sass formatter
  "vetur.format.defaultFormatter.sass": "sass-formatter",

  // Default formatter for <style lang='scss'> region
  //  - none: disable formatting
  //  - prettier: scss formatter using scss parser from prettier
  "vetur.format.defaultFormatter.scss": "prettier",

  // Default formatter for <style lang='stylus'> region
  //  - none: disable formatting
  //  - stylus-supremacy: stylus formatter from stylus-supremacy
  "vetur.format.defaultFormatter.stylus": "stylus-supremacy",

  // Default formatter for <script> region
  //  - none: disable formatting
  //  - prettier: ts formatter using typescript parser from prettier
  //  - prettier-tslint: ts formatter from TypeScript
  "vetur.format.defaultFormatter.ts": "prettier",

  // Options for all default formatters
  "vetur.format.defaultFormatterOptions": {
    "js-beautify-html": {
      "wrap_attributes": "force-expand-multiline"
    },
    "prettyhtml": {
      "printWidth": 100,
      "singleQuote": false,
      "wrapAttributes": false,
      "sortAttributes": false
    }
  },

  // Enable/disable the Vetur document formatter.
  "vetur.format.enable": true,

  // Number of spaces per indentation level. Inherited by all formatters.
  "vetur.format.options.tabSize": 2,

  // Use tabs for indentation. Inherited by all formatters.
  "vetur.format.options.useTabs": false,

  // Whether to have initial indent for <script> region
  "vetur.format.scriptInitialIndent": false,

  // Whether to have initial indent for <style> region
  "vetur.format.styleInitialIndent": false,

  // Mapping from custom block tag name to language name. Used for generating grammar to support syntax highlighting for custom blocks.
  "vetur.grammar.customBlocks": {
    "docs": "md",
    "i18n": "json"
  },

  // Whether to enable codeActions
  "vetur.languageFeatures.codeActions": true,

  // Traces the communication between VS Code and Vue Language Server.
  "vetur.trace.server": "off",

  // Use dependencies from workspace. Currently only for TypeScript.
  "vetur.useWorkspaceDependencies": true,

  // Validate interpolations in <template> region using TypeScript language service
  "vetur.validation.interpolation": true,

  // Validate js/ts in <script>
  "vetur.validation.script": true,

  // Validate css/scss/less/postcss in <style>
  "vetur.validation.style": true,

  // Validate vue-html in <template> using eslint-plugin-vue
  "vetur.validation.template": true,

  // Validate props usage in <template> region. Show error/warning for not passing declared props to child components and show error for passing wrongly typed interpolation expressions
  "vetur.validation.templateProps": false,

  "diffEditor.ignoreTrimWhitespace": false,
  "[html]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  },
  "svelte.enable-ts-plugin": true,
  "javascript.updateImportsOnFileMove.enabled": "always",
  "yaml.schemas": {
    "file:///Users/qpien/.vscode/extensions/atlassian.atlascode-2.10.0/resources/schemas/pipelines-schema.json": "bitbucket-pipelines.yml"
  },
  // "javascript.inlayHints.parameterNames.enabled": "literals",
  // "javascript.inlayHints.parameterTypes.enabled": true,
  // "typescript.inlayHints.parameterTypes.enabled": true,
  // "typescript.inlayHints.parameterNames.enabled": "literals",
  "terminal.integrated.env.osx": {
    "FIG_NEW_SESSION": "1"
  },
  "explorer.confirmDragAndDrop": false,
  "editor.unicodeHighlight.allowedCharacters": {
    "õ": true
  },
  "typescript.updateImportsOnFileMove.enabled": "always",
  "emmet.includeLanguages": {
    "javascript": "javascriptreact"
  },
  "editor.fontSize": 15,
  "javascript.preferences.jsxAttributeCompletionStyle": "braces",
  "typescript.preferences.jsxAttributeCompletionStyle": "braces",
  "liveServer.settings.donotShowInfoMsg": true,
  "editor.unicodeHighlight.ambiguousCharacters": false,
  "workbench.iconTheme": "vscode-icons",
  "editor.fontFamily": "Menlo, Monaco, 'Courier New', monospace",
  "editor.suggestSelection": "first",
  "vsintellicode.modify.editor.suggestSelection": "automaticallyOverrodeDefaultValue",
  "files.exclude": {
    "**/.classpath": true,
    "**/.project": true,
    "**/.settings": true,
    "**/.factorypath": true
  },
  "redhat.telemetry.enabled": true,
  "workbench.colorTheme": "Dark+ Tweaked",
  "java.jdt.ls.vmargs": "-XX:+UseParallelGC -XX:GCTimeRatio=4 -XX:AdaptiveSizePolicyWeight=90 -Dsun.zip.disableMemoryMapping=true -Xmx1G -Xms100m -javaagent:\"/Users/qpien/.vscode/extensions/gabrielbb.vscode-lombok-1.0.1/server/lombok.jar\""
}
